# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/20_computing-cielab-values-from-rgb.ipynb.

# %% auto 0
__all__ = ['read_target_data', 'RGBs_to_LABs', 'compute_deltaEs']

# %% ../notebooks/20_computing-cielab-values-from-rgb.ipynb 10
import colour 
import pandas as pd
import numpy as np 

# %% ../notebooks/20_computing-cielab-values-from-rgb.ipynb 11
def read_target_data(target_txt_file, verbose=False): 
    '''Read measured CIELAB values from text file for specific Colorchecker target. '''
    
    # just print the contents of the target data file...  
    if verbose: 
        with open(target_txt_file, 'r') as fh: 
            lines = fh.readlines()    
        for l in lines: 
            print(l, end='') 

    # TODO: make more robust for other file formats 
    target_df = pd.read_csv(target_txt_file, skiprows=22, delimiter='\t', decimal=',', nrows=140, 
                     usecols=[1, 2, 3, 4], names=['Name', 'ref_L*', 'ref_a*', 'ref_b*'])
    target_df.set_index('Name', inplace=True) 
    target_df.index.name = None 

    return target_df 


def RGBs_to_LABs(RGBs, use_derived_transformation_matrices=True): 
    '''Convert RGB values dataframe into CIELAB values dataframe assuming ECI_RGB_v2 colour space. 
    
    If the option `use_derived_transformation_matrices`is true (default) then high precision matrices 
    are used for the computation. If set to false, matrices values as described in the standards are used.'''

    # dataframe to array 
    index = RGBs.index 
    RGBs = RGBs.values

    
    # conversion of RGB to CIELAB 
    ECI_RGB_V2 = colour.models.RGB_COLOURSPACE_ECI_RGB_V2
    ECI_RGB_V2.use_derived_transformation_matrices = use_derived_transformation_matrices 
    illuminant = ECI_RGB_V2.whitepoint # D50 

    XYZs = colour.RGB_to_XYZ(RGBs, ECI_RGB_V2, apply_cctf_decoding=True)
    LABs = colour.XYZ_to_Lab(XYZs, illuminant=illuminant) 

    # array to dataframe 
    pd.options.display.float_format = '{:,.2f}'.format 
    LAB_df = pd.DataFrame(LABs, index=index, columns=['L*', 'a*', 'b*'])

    return LAB_df


def compute_deltaEs(target_LABs, tif_LABs):
    '''Computes color differences according to CIE2000 and CIE1976. '''

    # set global display options 
    #pd.options.display.precision = 2
    pd.options.display.float_format = '{:,.2f}'.format 
    both = pd.concat([target_LABs, tif_LABs], axis=1)

    dE_2000 = colour.delta_E(target_LABs.values, tif_LABs.values, method='CIE 2000') #, 'CIE 1994', 'CIE 2000') 
    dE_1976 = colour.delta_E(target_LABs.values, tif_LABs.values, method='CIE 1976') #, 'CIE 1994', 'CIE 2000')
    
    both['dE_2000'] = dE_2000
    both['dE_1976'] = dE_1976
    
    
    return both    
